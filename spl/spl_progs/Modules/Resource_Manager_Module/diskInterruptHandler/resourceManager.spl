alias functionNum R1;
alias currentPID R2;

//Acquire Disk
if(functionNum == 3) then
	while([DISK_STATUS_TABLE] == 1) do
		[PROCESS_TABLE+(16*currentPID)+4] = WAIT_DISK;
		multipush(R1,R2,R3);
		call SCHEDULER;
		multipop(R1,R2,R3);
	endwhile;
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE+4] = currentPID;
	return;
endif;

//Acquire Terminal
if(functionNum == 8) then
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE+(16*currentPID)+4] = WAIT_TERMINAL;
		multipush(R1,R2,R3);
		call SCHEDULER;
		multipop(R1,R2,R3);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE+1] = currentPID;
	return;
endif;

//Release Terminal
if(functionNum == 9) then
	if(currentPID == [TERMINAL_STATUS_TABLE+1]) then
		[TERMINAL_STATUS_TABLE] = 0;
		alias i R0;
		i = 1;
		while(i<16) do
			if([PROCESS_TABLE+(16*i)+4] == WAIT_TERMINAL) then
				[PROCESS_TABLE+(16*i)+4] = READY;
			endif;
			i = i+1;
		endwhile;
		R0 = 0;
	else
		R0 = -1;
	endif;
	return;
endif;
