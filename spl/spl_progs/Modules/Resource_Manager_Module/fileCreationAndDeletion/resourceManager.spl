alias functionNum R1;
alias currentPID R2;

//Acquire Disk
if(functionNum == 3) then
	while([DISK_STATUS_TABLE] == 1) do
		[PROCESS_TABLE+(16*currentPID)+4] = WAIT_DISK;
		multipush(R1,R2,R3);
		call SCHEDULER;
		multipop(R1,R2,R3);
	endwhile;
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE+4] = currentPID;
	return;
endif;

//Acquire Inode
if(functionNum == 4) then
	alias inodeIndex R3;
	while([FILE_STATUS_TABLE+4*inodeIndex]!=-1) do
		[PROCESS_TABLE+ 16*currentPID+ 4] = WAIT_FILE;
		[PROCESS_TABLE+ 16*currentPID+ 5] = inodeIndex;
		multipush(R1,R2,R3);
		call SCHEDULER;
		multipop(R1,R2,R3);
	endwhile;
	
	//Invalid entry due to deletion by other PROCESS_TABLE
	if([INODE_TABLE+16*inodeIndex+1]==-1) then
		R0=-1;
		return;
	endif;
	
	[FILE_STATUS_TABLE+4*inodeIndex]=currentPID;
	R0=0;
	return;
endif;

//Release inode
if(functionNum==5) then
    	alias inodeIndex R3;
    	if([FILE_STATUS_TABLE+4*inodeIndex]!=currentPID) then 
        	R0=-1;
        	return;
    	endif;
	[FILE_STATUS_TABLE+4*inodeIndex]=-1;
	alias i R4;
	i=0;
	while(i<16) do
		if(([PROCESS_TABLE+ 16*i+ 4]==WAIT_FILE)&&([PROCESS_TABLE+ 16*i+ 5]==inodeIndex)) then
			[PROCESS_TABLE+ 16*i+4] = READY;
	    		[PROCESS_TABLE+ 16*i+ 5] = -1;
		endif;
		i=i+1;
	endwhile;
	R0=0;
	return;
endif;

//Acquire Semaphore
if(functionNum == 6) then
	alias i R11;
	i = 0;
	alias ind R12;
	ind = -1;
	while(i<32) do
		if([SEMAPHORE_TABLE+4*i+1] == 0) then
			ind = i;
			break;
		endif;
		i = i+1;
	endwhile;
	
	if(ind == -1) then
		R0 = -1;
		return;
	endif;
	[SEMAPHORE_TABLE+4*ind] = currentPID;
	[SEMAPHORE_TABLE+4*ind+1] = 1;
	R0 = ind;
	return;
endif;

//Release Semaphore
if(functionNum == 7) then
	alias semTableID R11;
	semTableID = R3;
	alias i R12;
	i = 0;
	if([SEMAPHORE_TABLE+4*semTableID] == currentPID) then
		[SEMAPHORE_TABLE+4*semTableID] = -1;
		while(i<16) do
			if(([PROCESS_TABLE+i*16+4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE+i*16+5] == semTableID)) then
				[PROCESS_TABLE+i*16+4] = READY;
				[PROCESS_TABLE+i*16+5] = -1;
			endif;
			i = i+1;
		endwhile;
	endif;
	[SEMAPHORE_TABLE+4*semTableID+1] = [SEMAPHORE_TABLE+4*semTableID+1] - 1;
	R0 = 0;
	return;
endif;

//Acquire Terminal
if(functionNum == 8) then
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE+(16*currentPID)+4] = WAIT_TERMINAL;
		multipush(R1,R2,R3);
		call SCHEDULER;
		multipop(R1,R2,R3);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE+1] = currentPID;
	return;
endif;

//Release Terminal
if(functionNum == 9) then
	if(currentPID == [TERMINAL_STATUS_TABLE+1]) then
		[TERMINAL_STATUS_TABLE] = 0;
		alias i R0;
		i = 1;
		while(i<16) do
			if([PROCESS_TABLE+(16*i)+4] == WAIT_TERMINAL) then
				[PROCESS_TABLE+(16*i)+4] = READY;
			endif;
			i = i+1;
		endwhile;
		R0 = 0;
	else
		R0 = -1;
	endif;
	return;
endif;
