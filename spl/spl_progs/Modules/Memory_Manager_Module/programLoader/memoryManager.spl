alias functionNum R1;

//Get Free Page
if(functionNum == 1) then
	//[SYSTEM_STATUS_TABLE+3] => WAIT_MEM_COUNT incrementing
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;
	//[SYSTEM_STATUS_TABLE+2] => MEM_FREE_COUNT
	while([SYSTEM_STATUS_TABLE+2] == 0) do
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = WAIT_MEM;
		multipush(R0,R1,R2);
		call SCHEDULER;
		multipop(R0,R1,R2);
	endwhile;
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] - 1;
	[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;
	alias i R3;
	i=0;
	while(i<MAX_MEM_PAGE) do
		if([MEMORY_FREE_LIST+i] == 0) then
			[MEMORY_FREE_LIST+i] = 1;
			R0 = i;
			return;
		endif;
		i = i+1;
	endwhile;
endif;

//Release Page
if(functionNum == 2) then
	alias pageNumber R2;
	[MEMORY_FREE_LIST+pageNumber] = [MEMORY_FREE_LIST+pageNumber] - 1;
	if([MEMORY_FREE_LIST+pageNumber] == 0) then
		[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] + 1;
		alias i R3;
		i=0;
		while(i<16) do
			if([PROCESS_TABLE+16*i+4] == WAIT_MEM) then
				[PROCESS_TABLE+16*i+4] = READY;
			endif;
			i = i+1;
		endwhile;
	endif;
endif;

return;
