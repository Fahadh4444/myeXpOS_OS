alias functionNum R1;
alias currentPID R2;

// Disk store
if(functionNum==1) then
	alias pageNum R3;
	alias blockNum R4;
	multipush(R1,R2,R3,R4);
	//Acquire Disk
	R1=3;
	R2=currentPID;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+1]=1;
	[DISK_STATUS_TABLE+2]=pageNum;
	[DISK_STATUS_TABLE+3]=blockNum;
	store(pageNum,blockNum);
	[PROCESS_TABLE+(currentPID*16)+4] = WAIT_DISK;
	multipush(R1,R2,R3,R4);
	call SCHEDULER;
	multipop(R1,R2,R3,R4);
endif;

//Disk Load
if(functionNum == 2) then
	alias pageNumber R3;
	alias blockNumber R4;
	multipush(R0,R1,R2,R3,R4,R5);
	R1 = 3;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5);
	[DISK_STATUS_TABLE+1] = 0;
	[DISK_STATUS_TABLE+2] = pageNumber;
	[DISK_STATUS_TABLE+3] = blockNumber;
	load(pageNumber,blockNumber);
	[PROCESS_TABLE+(currentPID*16)+4] = WAIT_DISK;
	multipush(R0,R1,R2,R3,R4,R5);
	//Calls scheduler to run other processes till this process releases terminal
	call SCHEDULER;
	multipop(R0,R1,R2,R3,R4,R5);
endif;


//Terminal Write
if(functionNum == 3) then
	multipush(R0,R1,R2,R3);
	R1=8;
	R2=[SYSTEM_STATUS_TABLE+1];
	//Calling Module 0 for acquire terminal
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3);
	alias word R3;
	print word;
	multipush(R0,R1,R2,R3);
	R1=9;
	R2=[SYSTEM_STATUS_TABLE+1];
	//Calling Module 0 for releasing terminal
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3);
endif;

//Terminal Read
if(functionNum == 4) then	
	multipush(R0,R1,R2,R3);
	R1=8;
	R2=[SYSTEM_STATUS_TABLE+1];
	//Calling Module 0 for acquire terminal
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3);
	read;
	[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+4] = WAIT_TERMINAL;
	multipush(R0,R1,R2,R3);
	//Calls scheduler to run other processes till this process releases terminal
	call SCHEDULER;
	multipop(R0,R1,R2,R3);
	alias wordAddress R3;
	//Storing word from input buffer to R3
	[[PTBR+2*((wordAddress)/512)]*512+((wordAddress)%512)] = [PROCESS_TABLE+(currentPID*16)+8];
endif;

return;

