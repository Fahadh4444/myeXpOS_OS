//process table 9th entry contains MOD Flag
//Here we are equating it to 9 as our system call number is 9
//multiplies with 16 because each entry in process table is 16 words long
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=9;

//User SP
alias userSP R0;
userSP=SP;

//process table 13th entry contains user stack pointer UPTR
//In UPTR we store SP of user stack
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;

//process table 11th entry contains user area page number
//Where it contains kernal stack and we equate it to SP
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

//we make userSP-4 to get argument 1 from userStack
alias fileName R1;
fileName=[([PTBR+2*((userSP-4)/512)]*512)+((userSP-4)%512)];

alias i R2;
i=0;
alias inodeIndex R3;

while(i<MAX_FILE_NUM) do
	if([INODE_TABLE + 16*i + 1] != fileName) then
		i = i+1;
	else
		inodeIndex = i;
		break;
	endif;
endwhile;

if(i == MAX_FILE_NUM) then
    	alias physicalAddrRetVal R4;
   	physicalAddrRetVal=([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
    	[physicalAddrRetVal]=-1;
	SP=userSP;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	ireturn;
endif;

multipush(R0,R1,R2,R3,R4,R5,R6);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE+1];
call PROCESS_MANAGER;
multipop(R0,R1,R2,R3,R4,R5,R6);

alias userPage R5;
userPage = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11];

[MEMORY_FREE_LIST + userPage] = [MEMORY_FREE_LIST + userPage] + 1;

[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

SP=userPage*512-1;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = RUNNING;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7] = inodeIndex;
PTBR = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14];
PTLR = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+15];

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

multipush(R0,R1,R2,R3,R4,R5,R6);
i=0;
while(i<2) do
	R1 = 1;
	call MEMORY_MANAGER;
	[PTBR+2*i+4] = R0;
	[PTBR+2*i+5] = "0110";
	i=i+1;
endwhile;
multipop(R0,R1,R2,R3,R4,R5,R6);

multipush(R0,R1,R2,R3,R4,R5,R6);
i=0;
while(i<2) do
	R1 = 1;
	call MEMORY_MANAGER;
	[PTBR+2*i+16] = R0;
	[PTBR+2*i+17] = "0110";
	i=i+1;
endwhile;
multipop(R0,R1,R2,R3,R4,R5,R6);


multipush(R0,R1,R2,R3,R4,R5,R6);
alias codeBlock R7;
i=0;
while(i<4) do
	codeBlock = [INODE_TABLE+inodeIndex*16+8+i];
	if(codeBlock != -1) then
		R1 = 1;
		call MEMORY_MANAGER;
		[PTBR+2*i+8] = R0;
		[PTBR+2*i+9] = "0100";
		loadi(R0,codeBlock);
	endif;
	i = i+1;
endwhile;
multipop(R0,R1,R2,R3,R4,R5,R6);

[[PTBR+16]*512] = [[PTBR+8]*512+1];
SP = 8*512;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;

ireturn;
