//process table 9th entry contains MOD Flag
//Here we are equating it to 7 as our system call number is 7
//multiplies with 16 because each entry in process table is 16 words long
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=7;

//User SP
alias userSP R0;
userSP=SP;

//process table 13th entry contains user stack pointer UPTR
//In UPTR we store SP of user stack
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;

//process table 11th entry contains user area page number
//Where it contains kernal stack and we equate it to SP
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

//we make userSP-4 to get argument 1 from userStack
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhyscialAddr R3;
physicalPageNum=[PTBR+2*((userSP-4)/512)];
offset=(userSP-4)%512;
fileDescPhyscialAddr=(physicalPageNum*512)+offset;
alias fileDesciptor R4;
fileDesciptor=[fileDescPhyscialAddr];

//for return value space userSp-1
//return value sets to -1 if fileDesciptor not equal to -1
if(fileDesciptor!=-1) then
    alias physicalAddrRetVal R5;
    physicalAddrRetVal=([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
    [physicalAddrRetVal]=-1;
else
    alias wordAddress R5;
    //getting wordAddress from userStack arguments which were passed in user process
    wordAddress=[[PTBR+2*((userSP-3)/512)]*512+((userSP-3)%512)];
    multipush(R0,R1,R2,R3,R4,R5);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = wordAddress;
    //calling device manager
    call DEVICE_MANAGER;
    multipop(R0,R1,R2,R3,R4,R5);
    alias physicalAddrRetVal R6;
    physicalAddrRetVal=([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
    [physicalAddrRetVal]=0;
endif;

//Again set SP to userSP
SP=userSP;

//Change MOD Flag to 0
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;

//return to unprevileged mode
ireturn;
