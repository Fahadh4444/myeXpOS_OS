breakpoint;
//-1 indicates exception handler mode
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = -1;

alias userSP R11;
userSP = SP;

[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;

SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

backup;

multipush(EIP);

PTBR = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14];
PTLR = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+15];

if(EC != 0) then
	if(EC == 1) then
		print("Illegal Instruction");
	endif;
	if(EC == 2) then
		print("Illegal Memory Access");
	endif;
	if(EC == 3) then
		print("Arthmetic Exception");
	endif;
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	//Exit
	R1=3;
	R2=[SYSTEM_STATUS_TABLE+1];
	call PROCESS_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	call SCHEDULER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
endif;

//Page Fault
if(EC == 0) then
	//Heap Page
	if((EPN>=2) && (EPN<=3)) then
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
		//Get Free page
		multipush(EPN);
		R1 = 1;
		call MEMORY_MANAGER;
		multipop(EPN);
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+4]=R0;
        	[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+5]="1110";
        	//Get Free page
		multipush(EPN);
		R1 = 1;
		call MEMORY_MANAGER;
		multipop(EPN);
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+6]=R0;
        	[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+7]="1110";
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	endif;
	if((EPN>=4) && (EPN<=7)) then
		multipush(R2);
		alias codeBlockNum R2;
		codeBlockNum = [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+EPN];
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
		//Get Code Page
		R1 = 5;
		R2 = codeBlockNum;
		multipush(EPN);
		call MEMORY_MANAGER;
		multipop(EPN);
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*EPN]=R0;
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*EPN+1]="1100";
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
		multipop(R2);
	endif;
endif;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
multipop(EIP);
restore;

SP = userSP;
SP = SP+1;
[[PTBR+2*(SP/512)]*512+(SP%512)]=EIP;
breakpoint;
ireturn;
