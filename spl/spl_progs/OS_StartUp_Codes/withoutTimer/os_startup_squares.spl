//This code contains its init code in ../expl/expl_progs/squares.xsm

//load 7,8 pages in disk to 65,66 pages in memory
//7,8 pages in disk contains Init/Login Code
//65, 66 pages in memory contains INIT/Login Program
loadi(65,7);
loadi(66,8);

//load 35,36 pages in disk to 22,23 pages in memory
//35,36 pages in disk contains Interrupt 10 Routine: Exit
//22, 23 pages in memory contains Interrupt 10 Routine: Exit
loadi(22,35);
loadi(23,36);

//load 15,16 pages in disk to 2,3 pages in memory
//15,16 pages in disk contains Exception Handler
//2, 3 pages in memory contains Exception Handler
loadi(2,15);
loadi(3,16);


//Setting up page table base reference to PAGE_TABLE_BASE = 29696
//also assuming to take a length of 3 to page table and equating PTLR = 3
PTBR = PAGE_TABLE_BASE;
PTLR = 3;


//PTBR contains page table entries in which firts word holds page reference
//Second word hold the bits called Refrence bit, Valid bit, Write permission bit, Dirty bit
//In this case we have 3 page entries for 65,66 and 76
//76 is for stack page ("0110" sets the code pages "read/write" because stack requires it)
[PTBR+0] = 65;
[PTBR+1] = "0100";
[PTBR+2] = 66;
[PTBR+3] = "0100";
[PTBR+4] = 76;
[PTBR+5] = "0110";


//[76*512] is set to 0 because the we are assuming stack first word to be 0 (Virtual Address PTBR to 0)
//Also equating Stack Pointer(SP) = 2*512 (Because in our model stack page is third page)
[76*512] = 0;
SP = 2*512;


//ireturn instruction to transfer control to user program. ireturn translates to IRET machine instruction
ireturn;
