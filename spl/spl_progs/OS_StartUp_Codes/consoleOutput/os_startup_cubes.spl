loadi(65,7);
loadi(66,8);

loadi(22,35);
loadi(23,36);

loadi(2,15);
loadi(3,16);

loadi(63,13);
loadi(64,14);

//Loading Timer Interupt
loadi(4, 17);
loadi(5, 18);

//Loading INT 7 interrupt 
loadi(16,29);
loadi(17,30);

PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[76*512] = [65*512+1];
SP = 8*512;

//Set the User Area page number in the Process Table entry of the current process
//to 80 because 80 is our next free page in memory
[PROCESS_TABLE + 11] = 80;

//As we are using the first Process Table entry, the PID will be 0
//PID is second word in process table
[PROCESS_TABLE + 1] = 0;

//Here PID of the currently executing user process is 0
//Data structure called System Status Table used to store PID of current  process
[SYSTEM_STATUS_TABLE + 1] = 0;

ireturn;
